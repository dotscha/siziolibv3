0a1,5
> ; This source code is altered and is not the original version found on
> ; the Exomizer homepage.
> ; It contains modifications made by Krill/Plush to depack a packed file
> ; crunched forward and to work with his loader.
> 
28,29c33,34
< ; read a crunched byte. This subroutine has to preserve x and y register
< ; and must not modify the state of the carry flag.
---
> ; read a crunched byte. This subroutine has to preserve x and y register and,
> ; if FORWARD_DECRUNCHING = 0, must not modify the state of the carry flag.
44a50,56
> 
> ; -------------------------------------------------------------------
> ; set this flag to 0 if the data are depacked backwards,
> ; and non-0 otherwise
> ; -------------------------------------------------------------------
> FORWARD_DECRUNCHING=1
> 
121d132
< 	ldy #0
146a158
> .IF FORWARD_DECRUNCHING = 0
149a162,165
> .ELSE
> 	jsr get_crunched_byte
> 	sec
> .ENDIF
159a176,189
> 
> .IF FORWARD_DECRUNCHING
> 
> ; -------------------------------------------------------------------
> ; literal sequence handling
> ;
> literal_start:
> 	ldx #$10    ; these 16 bits
> 	jsr get_bits; tell the length of the sequence
> 	ldx zp_bits_hi
> literal_start1: ; if literal byte, a = 1, zp_bits_hi = 0
> 	sta zp_len_lo
> 	.byte $2c   ; skip next instruction
> 
164a195,233
> copy_start:
>     stx zp_bits_hi
>     ldy #$00
> copy_next:
> .IFNDEF LITERAL_SEQUENCES_NOT_USED
> 	bcs :+
> 	jsr get_crunched_byte
> 	clc
> 	.byte $2c; skip next instruction
> :
> .ENDIF
> 	lda (zp_src_lo),y
> 	sta (zp_dest_lo),y
>     iny
>     bne :+
>     dex
> 	inc zp_dest_hi
> 	inc zp_src_hi
> :   tya
> 	eor zp_len_lo
> 	bne copy_next
> 	txa
> 	bne copy_next
> 	tya
> 	clc
> 	adc zp_dest_lo
> 	sta zp_dest_lo
> 	bcc :+
> 	inc zp_dest_hi
> :
> 
> .ELSE
> 
> ; -------------------------------------------------------------------
> ; main copy loop
> ; x = length hi
> ; y = length lo
> ; (18(16) bytes)
> ;
180d248
< begin:
182a251,253
> 
> .ENDIF
> 
186a258
> begin:
206a279,283
>     .IF FORWARD_DECRUNCHING
> 	beq bits_done     ; gamma = 17   : end of file
> 	bcs literal_start ; gamma = 18   : literal sequence
> 	                  ; gamma = 1..16: sequence
> 	.ELSE
221a299
>     .ENDIF
252a331
> .IF FORWARD_DECRUNCHING = 0
268a348
>     .ENDIF
278a359,369
> .IF FORWARD_DECRUNCHING
> skipcarry:
>     sec
>     eor #$ff
>     adc zp_dest_lo
> 	sta zp_src_lo
> 	lda zp_dest_hi
> 	sbc zp_bits_hi
> 	sbc tabl_hi,y
> 	sta zp_src_hi
> .ELSE
286a378,379
> .ENDIF
> 
293a387
>     .IF FORWARD_DECRUNCHING = 0
294a389
> literal_start:
295a391
>     .ENDIF
